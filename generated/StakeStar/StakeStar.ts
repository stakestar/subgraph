// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CommitSnapshot extends ethereum.Event {
  get params(): CommitSnapshot__Params {
    return new CommitSnapshot__Params(this);
  }
}

export class CommitSnapshot__Params {
  _event: CommitSnapshot;

  constructor(event: CommitSnapshot) {
    this._event = event;
  }

  get total_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get total_ssETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CreateValidator extends ethereum.Event {
  get params(): CreateValidator__Params {
    return new CreateValidator__Params(this);
  }
}

export class CreateValidator__Params {
  _event: CreateValidator;

  constructor(event: CreateValidator) {
    this._event = event;
  }

  get params(): CreateValidatorParamsStruct {
    return changetype<CreateValidatorParamsStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get ssvDepositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CreateValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesPublicKeys(): Array<Bytes> {
    return this[5].toBytesArray();
  }

  get sharesEncrypted(): Array<Bytes> {
    return this[6].toBytesArray();
  }
}

export class DestroyValidator extends ethereum.Event {
  get params(): DestroyValidator__Params {
    return new DestroyValidator__Params(this);
  }
}

export class DestroyValidator__Params {
  _event: DestroyValidator;

  constructor(event: DestroyValidator) {
    this._event = event;
  }

  get publicKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LocalPoolUnstake extends ethereum.Event {
  get params(): LocalPoolUnstake__Params {
    return new LocalPoolUnstake__Params(this);
  }
}

export class LocalPoolUnstake__Params {
  _event: LocalPoolUnstake;

  constructor(event: LocalPoolUnstake) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ssETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetAddresses extends ethereum.Event {
  get params(): SetAddresses__Params {
    return new SetAddresses__Params(this);
  }
}

export class SetAddresses__Params {
  _event: SetAddresses;

  constructor(event: SetAddresses) {
    this._event = event;
  }

  get depositContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ssvNetwork(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ssvToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get oracleNetwork(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get stakeStarETH(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get stakeStarRegistry(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get stakeStarTreasury(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get withdrawalAddress(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get mevRecipient(): Address {
    return this._event.parameters[9].value.toAddress();
  }
}

export class SetLocalPoolParameters extends ethereum.Event {
  get params(): SetLocalPoolParameters__Params {
    return new SetLocalPoolParameters__Params(this);
  }
}

export class SetLocalPoolParameters__Params {
  _event: SetLocalPoolParameters;

  constructor(event: SetLocalPoolParameters) {
    this._event = event;
  }

  get localPoolMaxSize(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpuLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpuFrequencyLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetQueueParameters extends ethereum.Event {
  get params(): SetQueueParameters__Params {
    return new SetQueueParameters__Params(this);
  }
}

export class SetQueueParameters__Params {
  _event: SetQueueParameters;

  constructor(event: SetQueueParameters) {
    this._event = event;
  }

  get loopLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetRateParameters extends ethereum.Event {
  get params(): SetRateParameters__Params {
    return new SetRateParameters__Params(this);
  }
}

export class SetRateParameters__Params {
  _event: SetRateParameters;

  constructor(event: SetRateParameters) {
    this._event = event;
  }

  get rateBottomLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rateTopLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ssETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TreasurySwap extends ethereum.Event {
  get params(): TreasurySwap__Params {
    return new TreasurySwap__Params(this);
  }
}

export class TreasurySwap__Params {
  _event: TreasurySwap;

  constructor(event: TreasurySwap) {
    this._event = event;
  }

  get ssETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ssETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateValidator extends ethereum.Event {
  get params(): UpdateValidator__Params {
    return new UpdateValidator__Params(this);
  }
}

export class UpdateValidator__Params {
  _event: UpdateValidator;

  constructor(event: UpdateValidator) {
    this._event = event;
  }

  get params(): UpdateValidatorParamsStruct {
    return changetype<UpdateValidatorParamsStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get ssvDepositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesPublicKeys(): Array<Bytes> {
    return this[5].toBytesArray();
  }

  get sharesEncrypted(): Array<Bytes> {
    return this[6].toBytesArray();
  }
}

export class StakeStar__snapshotsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotal_ETH(): BigInt {
    return this.value0;
  }

  getTotal_ssETH(): BigInt {
    return this.value1;
  }

  getTimestamp(): BigInt {
    return this.value2;
  }
}

export class StakeStar extends ethereum.SmartContract {
  static bind(address: Address): StakeStar {
    return new StakeStar("StakeStar", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ETH_to_ssETH(eth: BigInt): BigInt {
    let result = super.call("ETH_to_ssETH", "ETH_to_ssETH(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(eth)
    ]);

    return result[0].toBigInt();
  }

  try_ETH_to_ssETH(eth: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ETH_to_ssETH",
      "ETH_to_ssETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(eth)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MANAGER_ROLE(): Bytes {
    let result = super.call("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  depositContract(): Address {
    let result = super.call(
      "depositContract",
      "depositContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_depositContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositContract",
      "depositContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  left(): BigInt {
    let result = super.call("left", "left():(uint32)", []);

    return result[0].toBigInt();
  }

  try_left(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("left", "left():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  localPoolMaxSize(): BigInt {
    let result = super.call(
      "localPoolMaxSize",
      "localPoolMaxSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_localPoolMaxSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "localPoolMaxSize",
      "localPoolMaxSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  localPoolSize(): BigInt {
    let result = super.call("localPoolSize", "localPoolSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_localPoolSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "localPoolSize",
      "localPoolSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loopLimit(): BigInt {
    let result = super.call("loopLimit", "loopLimit():(uint32)", []);

    return result[0].toBigInt();
  }

  try_loopLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loopLimit", "loopLimit():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpuFrequencyLimit(): BigInt {
    let result = super.call(
      "lpuFrequencyLimit",
      "lpuFrequencyLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lpuFrequencyLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpuFrequencyLimit",
      "lpuFrequencyLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpuHistory(param0: Address): BigInt {
    let result = super.call("lpuHistory", "lpuHistory(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lpuHistory(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpuHistory", "lpuHistory(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpuLimit(): BigInt {
    let result = super.call("lpuLimit", "lpuLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lpuLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpuLimit", "lpuLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mevRecipient(): Address {
    let result = super.call("mevRecipient", "mevRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_mevRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("mevRecipient", "mevRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  next(param0: BigInt): BigInt {
    let result = super.call("next", "next(uint32):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_next(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("next", "next(uint32):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleNetwork(): Address {
    let result = super.call("oracleNetwork", "oracleNetwork():(address)", []);

    return result[0].toAddress();
  }

  try_oracleNetwork(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleNetwork",
      "oracleNetwork():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingUnstake(param0: Address): BigInt {
    let result = super.call(
      "pendingUnstake",
      "pendingUnstake(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingUnstake(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingUnstake",
      "pendingUnstake(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingUnstakeQueue(param0: BigInt): Address {
    let result = super.call(
      "pendingUnstakeQueue",
      "pendingUnstakeQueue(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_pendingUnstakeQueue(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingUnstakeQueue",
      "pendingUnstakeQueue(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingUnstakeSum(): BigInt {
    let result = super.call(
      "pendingUnstakeSum",
      "pendingUnstakeSum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pendingUnstakeSum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingUnstakeSum",
      "pendingUnstakeSum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previous(param0: BigInt): BigInt {
    let result = super.call("previous", "previous(uint32):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_previous(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("previous", "previous(uint32):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  queueIndex(msgSender: Address): BigInt {
    let result = super.call("queueIndex", "queueIndex(address):(uint32)", [
      ethereum.Value.fromAddress(msgSender)
    ]);

    return result[0].toBigInt();
  }

  try_queueIndex(msgSender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("queueIndex", "queueIndex(address):(uint32)", [
      ethereum.Value.fromAddress(msgSender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rate(): BigInt {
    let result = super.call("rate", "rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rate1(timestamp: BigInt): BigInt {
    let result = super.call("rate", "rate(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_rate1(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timestamp)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateBottomLimit(): BigInt {
    let result = super.call(
      "rateBottomLimit",
      "rateBottomLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rateBottomLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateBottomLimit",
      "rateBottomLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateTopLimit(): BigInt {
    let result = super.call("rateTopLimit", "rateTopLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rateTopLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rateTopLimit", "rateTopLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservedTreasuryCommission(): BigInt {
    let result = super.call(
      "reservedTreasuryCommission",
      "reservedTreasuryCommission():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reservedTreasuryCommission(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reservedTreasuryCommission",
      "reservedTreasuryCommission():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  right(): BigInt {
    let result = super.call("right", "right():(uint32)", []);

    return result[0].toBigInt();
  }

  try_right(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("right", "right():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  snapshots(param0: BigInt): StakeStar__snapshotsResult {
    let result = super.call(
      "snapshots",
      "snapshots(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakeStar__snapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_snapshots(
    param0: BigInt
  ): ethereum.CallResult<StakeStar__snapshotsResult> {
    let result = super.tryCall(
      "snapshots",
      "snapshots(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeStar__snapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  ssETH_to_ETH(ssETH: BigInt): BigInt {
    let result = super.call("ssETH_to_ETH", "ssETH_to_ETH(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(ssETH)
    ]);

    return result[0].toBigInt();
  }

  try_ssETH_to_ETH(ssETH: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ssETH_to_ETH",
      "ssETH_to_ETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(ssETH)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ssvNetwork(): Address {
    let result = super.call("ssvNetwork", "ssvNetwork():(address)", []);

    return result[0].toAddress();
  }

  try_ssvNetwork(): ethereum.CallResult<Address> {
    let result = super.tryCall("ssvNetwork", "ssvNetwork():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ssvToken(): Address {
    let result = super.call("ssvToken", "ssvToken():(address)", []);

    return result[0].toAddress();
  }

  try_ssvToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("ssvToken", "ssvToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeStarETH(): Address {
    let result = super.call("stakeStarETH", "stakeStarETH():(address)", []);

    return result[0].toAddress();
  }

  try_stakeStarETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakeStarETH", "stakeStarETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeStarRegistry(): Address {
    let result = super.call(
      "stakeStarRegistry",
      "stakeStarRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakeStarRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakeStarRegistry",
      "stakeStarRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeStarTreasury(): Address {
    let result = super.call(
      "stakeStarTreasury",
      "stakeStarTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakeStarTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakeStarTreasury",
      "stakeStarTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unstake(ssETH: BigInt): BigInt {
    let result = super.call("unstake", "unstake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(ssETH)
    ]);

    return result[0].toBigInt();
  }

  try_unstake(ssETH: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unstake", "unstake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(ssETH)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorCreationAvailability(): boolean {
    let result = super.call(
      "validatorCreationAvailability",
      "validatorCreationAvailability():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_validatorCreationAvailability(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorCreationAvailability",
      "validatorCreationAvailability():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validatorDestructionAvailability(): boolean {
    let result = super.call(
      "validatorDestructionAvailability",
      "validatorDestructionAvailability():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_validatorDestructionAvailability(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorDestructionAvailability",
      "validatorDestructionAvailability():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validatorToDestroy(): Bytes {
    let result = super.call(
      "validatorToDestroy",
      "validatorToDestroy():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_validatorToDestroy(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "validatorToDestroy",
      "validatorToDestroy():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  withdrawalAddress(): Address {
    let result = super.call(
      "withdrawalAddress",
      "withdrawalAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_withdrawalAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalAddress",
      "withdrawalAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CommitSnapshotCall extends ethereum.Call {
  get inputs(): CommitSnapshotCall__Inputs {
    return new CommitSnapshotCall__Inputs(this);
  }

  get outputs(): CommitSnapshotCall__Outputs {
    return new CommitSnapshotCall__Outputs(this);
  }
}

export class CommitSnapshotCall__Inputs {
  _call: CommitSnapshotCall;

  constructor(call: CommitSnapshotCall) {
    this._call = call;
  }
}

export class CommitSnapshotCall__Outputs {
  _call: CommitSnapshotCall;

  constructor(call: CommitSnapshotCall) {
    this._call = call;
  }
}

export class CreateValidatorCall extends ethereum.Call {
  get inputs(): CreateValidatorCall__Inputs {
    return new CreateValidatorCall__Inputs(this);
  }

  get outputs(): CreateValidatorCall__Outputs {
    return new CreateValidatorCall__Outputs(this);
  }
}

export class CreateValidatorCall__Inputs {
  _call: CreateValidatorCall;

  constructor(call: CreateValidatorCall) {
    this._call = call;
  }

  get validatorParams(): CreateValidatorCallValidatorParamsStruct {
    return changetype<CreateValidatorCallValidatorParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get ssvDepositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateValidatorCall__Outputs {
  _call: CreateValidatorCall;

  constructor(call: CreateValidatorCall) {
    this._call = call;
  }
}

export class CreateValidatorCallValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesPublicKeys(): Array<Bytes> {
    return this[5].toBytesArray();
  }

  get sharesEncrypted(): Array<Bytes> {
    return this[6].toBytesArray();
  }
}

export class DestroyValidatorCall extends ethereum.Call {
  get inputs(): DestroyValidatorCall__Inputs {
    return new DestroyValidatorCall__Inputs(this);
  }

  get outputs(): DestroyValidatorCall__Outputs {
    return new DestroyValidatorCall__Outputs(this);
  }
}

export class DestroyValidatorCall__Inputs {
  _call: DestroyValidatorCall;

  constructor(call: DestroyValidatorCall) {
    this._call = call;
  }

  get publicKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DestroyValidatorCall__Outputs {
  _call: DestroyValidatorCall;

  constructor(call: DestroyValidatorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LocalPoolUnstakeCall extends ethereum.Call {
  get inputs(): LocalPoolUnstakeCall__Inputs {
    return new LocalPoolUnstakeCall__Inputs(this);
  }

  get outputs(): LocalPoolUnstakeCall__Outputs {
    return new LocalPoolUnstakeCall__Outputs(this);
  }
}

export class LocalPoolUnstakeCall__Inputs {
  _call: LocalPoolUnstakeCall;

  constructor(call: LocalPoolUnstakeCall) {
    this._call = call;
  }

  get ssETH(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LocalPoolUnstakeCall__Outputs {
  _call: LocalPoolUnstakeCall;

  constructor(call: LocalPoolUnstakeCall) {
    this._call = call;
  }
}

export class ReactivateAccountCall extends ethereum.Call {
  get inputs(): ReactivateAccountCall__Inputs {
    return new ReactivateAccountCall__Inputs(this);
  }

  get outputs(): ReactivateAccountCall__Outputs {
    return new ReactivateAccountCall__Outputs(this);
  }
}

export class ReactivateAccountCall__Inputs {
  _call: ReactivateAccountCall;

  constructor(call: ReactivateAccountCall) {
    this._call = call;
  }
}

export class ReactivateAccountCall__Outputs {
  _call: ReactivateAccountCall;

  constructor(call: ReactivateAccountCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get depositContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ssvNetworkAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ssvTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get oracleNetworkAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get stakeStarETHAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get stakeStarRegistryAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get stakeStarTreasuryAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get withdrawalCredentialsAddress(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get feeRecipientAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get mevRecipientAddress(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetLocalPoolParametersCall extends ethereum.Call {
  get inputs(): SetLocalPoolParametersCall__Inputs {
    return new SetLocalPoolParametersCall__Inputs(this);
  }

  get outputs(): SetLocalPoolParametersCall__Outputs {
    return new SetLocalPoolParametersCall__Outputs(this);
  }
}

export class SetLocalPoolParametersCall__Inputs {
  _call: SetLocalPoolParametersCall;

  constructor(call: SetLocalPoolParametersCall) {
    this._call = call;
  }

  get _localPoolMaxSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpuLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lpuFrequencyLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetLocalPoolParametersCall__Outputs {
  _call: SetLocalPoolParametersCall;

  constructor(call: SetLocalPoolParametersCall) {
    this._call = call;
  }
}

export class SetQueueParametersCall extends ethereum.Call {
  get inputs(): SetQueueParametersCall__Inputs {
    return new SetQueueParametersCall__Inputs(this);
  }

  get outputs(): SetQueueParametersCall__Outputs {
    return new SetQueueParametersCall__Outputs(this);
  }
}

export class SetQueueParametersCall__Inputs {
  _call: SetQueueParametersCall;

  constructor(call: SetQueueParametersCall) {
    this._call = call;
  }

  get _loopLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetQueueParametersCall__Outputs {
  _call: SetQueueParametersCall;

  constructor(call: SetQueueParametersCall) {
    this._call = call;
  }
}

export class SetRateParametersCall extends ethereum.Call {
  get inputs(): SetRateParametersCall__Inputs {
    return new SetRateParametersCall__Inputs(this);
  }

  get outputs(): SetRateParametersCall__Outputs {
    return new SetRateParametersCall__Outputs(this);
  }
}

export class SetRateParametersCall__Inputs {
  _call: SetRateParametersCall;

  constructor(call: SetRateParametersCall) {
    this._call = call;
  }

  get _rateBottomLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rateTopLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRateParametersCall__Outputs {
  _call: SetRateParametersCall;

  constructor(call: SetRateParametersCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get ssETH(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get eth(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateValidatorCall extends ethereum.Call {
  get inputs(): UpdateValidatorCall__Inputs {
    return new UpdateValidatorCall__Inputs(this);
  }

  get outputs(): UpdateValidatorCall__Outputs {
    return new UpdateValidatorCall__Outputs(this);
  }
}

export class UpdateValidatorCall__Inputs {
  _call: UpdateValidatorCall;

  constructor(call: UpdateValidatorCall) {
    this._call = call;
  }

  get validatorParams(): UpdateValidatorCallValidatorParamsStruct {
    return changetype<UpdateValidatorCallValidatorParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get ssvDepositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateValidatorCall__Outputs {
  _call: UpdateValidatorCall;

  constructor(call: UpdateValidatorCall) {
    this._call = call;
  }
}

export class UpdateValidatorCallValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesPublicKeys(): Array<Bytes> {
    return this[5].toBytesArray();
  }

  get sharesEncrypted(): Array<Bytes> {
    return this[6].toBytesArray();
  }
}
