// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CommitSnapshot extends ethereum.Event {
  get params(): CommitSnapshot__Params {
    return new CommitSnapshot__Params(this);
  }
}

export class CommitSnapshot__Params {
  _event: CommitSnapshot;

  constructor(event: CommitSnapshot) {
    this._event = event;
  }

  get total_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get total_stakedStar(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CreateValidator extends ethereum.Event {
  get params(): CreateValidator__Params {
    return new CreateValidator__Params(this);
  }
}

export class CreateValidator__Params {
  _event: CreateValidator;

  constructor(event: CreateValidator) {
    this._event = event;
  }

  get params(): CreateValidatorParamsStruct {
    return changetype<CreateValidatorParamsStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }

  get ssvDepositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CreateValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesData(): Bytes {
    return this[5].toBytes();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DestroyValidator extends ethereum.Event {
  get params(): DestroyValidator__Params {
    return new DestroyValidator__Params(this);
  }
}

export class DestroyValidator__Params {
  _event: DestroyValidator;

  constructor(event: DestroyValidator) {
    this._event = event;
  }

  get publicKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ExtractCommission extends ethereum.Event {
  get params(): ExtractCommission__Params {
    return new ExtractCommission__Params(this);
  }
}

export class ExtractCommission__Params {
  _event: ExtractCommission;

  constructor(event: ExtractCommission) {
    this._event = event;
  }

  get ssETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LocalPoolWithdraw extends ethereum.Event {
  get params(): LocalPoolWithdraw__Params {
    return new LocalPoolWithdraw__Params(this);
  }
}

export class LocalPoolWithdraw__Params {
  _event: LocalPoolWithdraw;

  constructor(event: LocalPoolWithdraw) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get starETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OptimizeCapitalEfficiency extends ethereum.Event {
  get params(): OptimizeCapitalEfficiency__Params {
    return new OptimizeCapitalEfficiency__Params(this);
  }
}

export class OptimizeCapitalEfficiency__Params {
  _event: OptimizeCapitalEfficiency;

  constructor(event: OptimizeCapitalEfficiency) {
    this._event = event;
  }

  get ssETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RateDiff extends ethereum.Event {
  get params(): RateDiff__Params {
    return new RateDiff__Params(this);
  }
}

export class RateDiff__Params {
  _event: RateDiff;

  constructor(event: RateDiff) {
    this._event = event;
  }

  get realRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get calculatedRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RateEC extends ethereum.Event {
  get params(): RateEC__Params {
    return new RateEC__Params(this);
  }
}

export class RateEC__Params {
  _event: RateEC;

  constructor(event: RateEC) {
    this._event = event;
  }

  get rateEC(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RegisterValidator extends ethereum.Event {
  get params(): RegisterValidator__Params {
    return new RegisterValidator__Params(this);
  }
}

export class RegisterValidator__Params {
  _event: RegisterValidator;

  constructor(event: RegisterValidator) {
    this._event = event;
  }

  get params(): RegisterValidatorParamsStruct {
    return changetype<RegisterValidatorParamsStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }
}

export class RegisterValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesData(): Bytes {
    return this[5].toBytes();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetAddresses extends ethereum.Event {
  get params(): SetAddresses__Params {
    return new SetAddresses__Params(this);
  }
}

export class SetAddresses__Params {
  _event: SetAddresses;

  constructor(event: SetAddresses) {
    this._event = event;
  }

  get depositContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ssvNetwork(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ssvToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get oracleNetwork(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get sstarETH(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get starETH(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get stakeStarRegistry(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get stakeStarTreasury(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get withdrawalAddress(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get mevRecipient(): Address {
    return this._event.parameters[10].value.toAddress();
  }
}

export class SetCommissionParameters extends ethereum.Event {
  get params(): SetCommissionParameters__Params {
    return new SetCommissionParameters__Params(this);
  }
}

export class SetCommissionParameters__Params {
  _event: SetCommissionParameters;

  constructor(event: SetCommissionParameters) {
    this._event = event;
  }

  get rateDiffThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetLocalPoolParameters extends ethereum.Event {
  get params(): SetLocalPoolParameters__Params {
    return new SetLocalPoolParameters__Params(this);
  }
}

export class SetLocalPoolParameters__Params {
  _event: SetLocalPoolParameters;

  constructor(event: SetLocalPoolParameters) {
    this._event = event;
  }

  get localPoolMaxSize(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get limit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get frequencyLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetQueueParameters extends ethereum.Event {
  get params(): SetQueueParameters__Params {
    return new SetQueueParameters__Params(this);
  }
}

export class SetQueueParameters__Params {
  _event: SetQueueParameters;

  constructor(event: SetQueueParameters) {
    this._event = event;
  }

  get loopLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetRateParameters extends ethereum.Event {
  get params(): SetRateParameters__Params {
    return new SetRateParameters__Params(this);
  }
}

export class SetRateParameters__Params {
  _event: SetRateParameters;

  constructor(event: SetRateParameters) {
    this._event = event;
  }

  get maxRateDeviation(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get rateDeviationCheck(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetUnstakeParameters extends ethereum.Event {
  get params(): SetUnstakeParameters__Params {
    return new SetUnstakeParameters__Params(this);
  }
}

export class SetUnstakeParameters__Params {
  _event: SetUnstakeParameters;

  constructor(event: SetUnstakeParameters) {
    this._event = event;
  }

  get ustakePeriodLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetValidatorWithdrawalThreshold extends ethereum.Event {
  get params(): SetValidatorWithdrawalThreshold__Params {
    return new SetValidatorWithdrawalThreshold__Params(this);
  }
}

export class SetValidatorWithdrawalThreshold__Params {
  _event: SetValidatorWithdrawalThreshold;

  constructor(event: SetValidatorWithdrawalThreshold) {
    this._event = event;
  }

  get threshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetWithdrawalParameters extends ethereum.Event {
  get params(): SetWithdrawalParameters__Params {
    return new SetWithdrawalParameters__Params(this);
  }
}

export class SetWithdrawalParameters__Params {
  _event: SetWithdrawalParameters;

  constructor(event: SetWithdrawalParameters) {
    this._event = event;
  }

  get withdrawalMinLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get starETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sstarETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnregisterValidator extends ethereum.Event {
  get params(): UnregisterValidator__Params {
    return new UnregisterValidator__Params(this);
  }
}

export class UnregisterValidator__Params {
  _event: UnregisterValidator;

  constructor(event: UnregisterValidator) {
    this._event = event;
  }

  get publicKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sstarETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get starETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateValidator extends ethereum.Event {
  get params(): UpdateValidator__Params {
    return new UpdateValidator__Params(this);
  }
}

export class UpdateValidator__Params {
  _event: UpdateValidator;

  constructor(event: UpdateValidator) {
    this._event = event;
  }

  get params(): UpdateValidatorParamsStruct {
    return changetype<UpdateValidatorParamsStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }

  get ssvDepositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesData(): Bytes {
    return this[5].toBytes();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get starETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeStar__queueResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getNext(): Address {
    return this.value0;
  }

  getPendingAmount(): BigInt {
    return this.value1;
  }
}

export class StakeStar__snapshotsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotal_ETH(): BigInt {
    return this.value0;
  }

  getTotal_stakedStar(): BigInt {
    return this.value1;
  }

  getTimestamp(): BigInt {
    return this.value2;
  }
}

export class StakeStar extends ethereum.SmartContract {
  static bind(address: Address): StakeStar {
    return new StakeStar("StakeStar", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ETHToStakedStar(eth: BigInt): BigInt {
    let result = super.call(
      "ETHToStakedStar",
      "ETHToStakedStar(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(eth)],
    );

    return result[0].toBigInt();
  }

  try_ETHToStakedStar(eth: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ETHToStakedStar",
      "ETHToStakedStar(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(eth)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositContract(): Address {
    let result = super.call(
      "depositContract",
      "depositContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_depositContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositContract",
      "depositContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  head(): Address {
    let result = super.call("head", "head():(address)", []);

    return result[0].toAddress();
  }

  try_head(): ethereum.CallResult<Address> {
    let result = super.tryCall("head", "head():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  localPoolMaxSize(): BigInt {
    let result = super.call(
      "localPoolMaxSize",
      "localPoolMaxSize():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_localPoolMaxSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "localPoolMaxSize",
      "localPoolMaxSize():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  localPoolSize(): BigInt {
    let result = super.call("localPoolSize", "localPoolSize():(uint96)", []);

    return result[0].toBigInt();
  }

  try_localPoolSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("localPoolSize", "localPoolSize():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  localPoolWithdrawalHistory(param0: Address): BigInt {
    let result = super.call(
      "localPoolWithdrawalHistory",
      "localPoolWithdrawalHistory(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_localPoolWithdrawalHistory(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "localPoolWithdrawalHistory",
      "localPoolWithdrawalHistory(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  localPoolWithdrawalLimit(): BigInt {
    let result = super.call(
      "localPoolWithdrawalLimit",
      "localPoolWithdrawalLimit():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_localPoolWithdrawalLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "localPoolWithdrawalLimit",
      "localPoolWithdrawalLimit():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  localPoolWithdrawalPeriodLimit(): BigInt {
    let result = super.call(
      "localPoolWithdrawalPeriodLimit",
      "localPoolWithdrawalPeriodLimit():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_localPoolWithdrawalPeriodLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "localPoolWithdrawalPeriodLimit",
      "localPoolWithdrawalPeriodLimit():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loopLimit(): BigInt {
    let result = super.call("loopLimit", "loopLimit():(uint32)", []);

    return result[0].toBigInt();
  }

  try_loopLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loopLimit", "loopLimit():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRateDeviation(): i32 {
    let result = super.call(
      "maxRateDeviation",
      "maxRateDeviation():(uint24)",
      [],
    );

    return result[0].toI32();
  }

  try_maxRateDeviation(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxRateDeviation",
      "maxRateDeviation():(uint24)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  mevRecipient(): Address {
    let result = super.call("mevRecipient", "mevRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_mevRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("mevRecipient", "mevRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleNetwork(): Address {
    let result = super.call("oracleNetwork", "oracleNetwork():(address)", []);

    return result[0].toAddress();
  }

  try_oracleNetwork(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleNetwork",
      "oracleNetwork():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingWithdrawalSum(): BigInt {
    let result = super.call(
      "pendingWithdrawalSum",
      "pendingWithdrawalSum():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_pendingWithdrawalSum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingWithdrawalSum",
      "pendingWithdrawalSum():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  queue(param0: Address): StakeStar__queueResult {
    let result = super.call("queue", "queue(address):(address,uint96)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return new StakeStar__queueResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_queue(param0: Address): ethereum.CallResult<StakeStar__queueResult> {
    let result = super.tryCall("queue", "queue(address):(address,uint96)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeStar__queueResult(value[0].toAddress(), value[1].toBigInt()),
    );
  }

  queueIndex(msgSender: Address): BigInt {
    let result = super.call("queueIndex", "queueIndex(address):(uint32)", [
      ethereum.Value.fromAddress(msgSender),
    ]);

    return result[0].toBigInt();
  }

  try_queueIndex(msgSender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("queueIndex", "queueIndex(address):(uint32)", [
      ethereum.Value.fromAddress(msgSender),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rate(): BigInt {
    let result = super.call("rate", "rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rate1(timestamp: BigInt): BigInt {
    let result = super.call("rate", "rate(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timestamp),
    ]);

    return result[0].toBigInt();
  }

  try_rate1(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timestamp),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateCorrectionFactor(): BigInt {
    let result = super.call(
      "rateCorrectionFactor",
      "rateCorrectionFactor():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rateCorrectionFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateCorrectionFactor",
      "rateCorrectionFactor():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateDeviationCheck(): boolean {
    let result = super.call(
      "rateDeviationCheck",
      "rateDeviationCheck():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_rateDeviationCheck(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rateDeviationCheck",
      "rateDeviationCheck():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rateDiffThreshold(): BigInt {
    let result = super.call(
      "rateDiffThreshold",
      "rateDiffThreshold():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rateDiffThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateDiffThreshold",
      "rateDiffThreshold():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateForExtractCommision(): BigInt {
    let result = super.call(
      "rateForExtractCommision",
      "rateForExtractCommision():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rateForExtractCommision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateForExtractCommision",
      "rateForExtractCommision():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  snapshots(param0: BigInt): StakeStar__snapshotsResult {
    let result = super.call(
      "snapshots",
      "snapshots(uint256):(uint96,uint96,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new StakeStar__snapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_snapshots(
    param0: BigInt,
  ): ethereum.CallResult<StakeStar__snapshotsResult> {
    let result = super.tryCall(
      "snapshots",
      "snapshots(uint256):(uint96,uint96,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeStar__snapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  sstarETH(): Address {
    let result = super.call("sstarETH", "sstarETH():(address)", []);

    return result[0].toAddress();
  }

  try_sstarETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("sstarETH", "sstarETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ssvNetwork(): Address {
    let result = super.call("ssvNetwork", "ssvNetwork():(address)", []);

    return result[0].toAddress();
  }

  try_ssvNetwork(): ethereum.CallResult<Address> {
    let result = super.tryCall("ssvNetwork", "ssvNetwork():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ssvToken(): Address {
    let result = super.call("ssvToken", "ssvToken():(address)", []);

    return result[0].toAddress();
  }

  try_ssvToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("ssvToken", "ssvToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stake(starAmount: BigInt): BigInt {
    let result = super.call("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(starAmount),
    ]);

    return result[0].toBigInt();
  }

  try_stake(starAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(starAmount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeHistory(param0: Address): BigInt {
    let result = super.call("stakeHistory", "stakeHistory(address):(uint32)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_stakeHistory(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeHistory",
      "stakeHistory(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeStarRegistry(): Address {
    let result = super.call(
      "stakeStarRegistry",
      "stakeStarRegistry():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_stakeStarRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakeStarRegistry",
      "stakeStarRegistry():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeStarTreasury(): Address {
    let result = super.call(
      "stakeStarTreasury",
      "stakeStarTreasury():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_stakeStarTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakeStarTreasury",
      "stakeStarTreasury():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedStarToETH(ssETH: BigInt): BigInt {
    let result = super.call(
      "stakedStarToETH",
      "stakedStarToETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(ssETH)],
    );

    return result[0].toBigInt();
  }

  try_stakedStarToETH(ssETH: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedStarToETH",
      "stakedStarToETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(ssETH)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  starETH(): Address {
    let result = super.call("starETH", "starETH():(address)", []);

    return result[0].toAddress();
  }

  try_starETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("starETH", "starETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tail(): Address {
    let result = super.call("tail", "tail():(address)", []);

    return result[0].toAddress();
  }

  try_tail(): ethereum.CallResult<Address> {
    let result = super.tryCall("tail", "tail():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unstake(stakedStarAmount: BigInt): BigInt {
    let result = super.call("unstake", "unstake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(stakedStarAmount),
    ]);

    return result[0].toBigInt();
  }

  try_unstake(stakedStarAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unstake", "unstake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(stakedStarAmount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakePeriodLimit(): BigInt {
    let result = super.call(
      "unstakePeriodLimit",
      "unstakePeriodLimit():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_unstakePeriodLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakePeriodLimit",
      "unstakePeriodLimit():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorCreationAvailability(): boolean {
    let result = super.call(
      "validatorCreationAvailability",
      "validatorCreationAvailability():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_validatorCreationAvailability(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorCreationAvailability",
      "validatorCreationAvailability():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validatorDestructionAvailability(): boolean {
    let result = super.call(
      "validatorDestructionAvailability",
      "validatorDestructionAvailability():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_validatorDestructionAvailability(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorDestructionAvailability",
      "validatorDestructionAvailability():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validatorToDestroy(): Bytes {
    let result = super.call(
      "validatorToDestroy",
      "validatorToDestroy():(bytes)",
      [],
    );

    return result[0].toBytes();
  }

  try_validatorToDestroy(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "validatorToDestroy",
      "validatorToDestroy():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  validatorWithdrawalThreshold(): BigInt {
    let result = super.call(
      "validatorWithdrawalThreshold",
      "validatorWithdrawalThreshold():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_validatorWithdrawalThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorWithdrawalThreshold",
      "validatorWithdrawalThreshold():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalAddress(): Address {
    let result = super.call(
      "withdrawalAddress",
      "withdrawalAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_withdrawalAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalAddress",
      "withdrawalAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawalMinLimit(): BigInt {
    let result = super.call(
      "withdrawalMinLimit",
      "withdrawalMinLimit():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_withdrawalMinLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalMinLimit",
      "withdrawalMinLimit():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CommitSnapshotCall extends ethereum.Call {
  get inputs(): CommitSnapshotCall__Inputs {
    return new CommitSnapshotCall__Inputs(this);
  }

  get outputs(): CommitSnapshotCall__Outputs {
    return new CommitSnapshotCall__Outputs(this);
  }
}

export class CommitSnapshotCall__Inputs {
  _call: CommitSnapshotCall;

  constructor(call: CommitSnapshotCall) {
    this._call = call;
  }
}

export class CommitSnapshotCall__Outputs {
  _call: CommitSnapshotCall;

  constructor(call: CommitSnapshotCall) {
    this._call = call;
  }
}

export class CreateValidatorCall extends ethereum.Call {
  get inputs(): CreateValidatorCall__Inputs {
    return new CreateValidatorCall__Inputs(this);
  }

  get outputs(): CreateValidatorCall__Outputs {
    return new CreateValidatorCall__Outputs(this);
  }
}

export class CreateValidatorCall__Inputs {
  _call: CreateValidatorCall;

  constructor(call: CreateValidatorCall) {
    this._call = call;
  }

  get validatorParams(): CreateValidatorCallValidatorParamsStruct {
    return changetype<CreateValidatorCallValidatorParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get cluster(): CreateValidatorCallClusterStruct {
    return changetype<CreateValidatorCallClusterStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class CreateValidatorCall__Outputs {
  _call: CreateValidatorCall;

  constructor(call: CreateValidatorCall) {
    this._call = call;
  }
}

export class CreateValidatorCallValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesData(): Bytes {
    return this[5].toBytes();
  }
}

export class CreateValidatorCallClusterStruct extends ethereum.Tuple {
  get validatorCount(): BigInt {
    return this[0].toBigInt();
  }

  get networkFeeIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get active(): boolean {
    return this[3].toBoolean();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositAndStakeCall extends ethereum.Call {
  get inputs(): DepositAndStakeCall__Inputs {
    return new DepositAndStakeCall__Inputs(this);
  }

  get outputs(): DepositAndStakeCall__Outputs {
    return new DepositAndStakeCall__Outputs(this);
  }
}

export class DepositAndStakeCall__Inputs {
  _call: DepositAndStakeCall;

  constructor(call: DepositAndStakeCall) {
    this._call = call;
  }
}

export class DepositAndStakeCall__Outputs {
  _call: DepositAndStakeCall;

  constructor(call: DepositAndStakeCall) {
    this._call = call;
  }
}

export class DestroyValidatorCall extends ethereum.Call {
  get inputs(): DestroyValidatorCall__Inputs {
    return new DestroyValidatorCall__Inputs(this);
  }

  get outputs(): DestroyValidatorCall__Outputs {
    return new DestroyValidatorCall__Outputs(this);
  }
}

export class DestroyValidatorCall__Inputs {
  _call: DestroyValidatorCall;

  constructor(call: DestroyValidatorCall) {
    this._call = call;
  }

  get publicKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get cluster(): DestroyValidatorCallClusterStruct {
    return changetype<DestroyValidatorCallClusterStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class DestroyValidatorCall__Outputs {
  _call: DestroyValidatorCall;

  constructor(call: DestroyValidatorCall) {
    this._call = call;
  }
}

export class DestroyValidatorCallClusterStruct extends ethereum.Tuple {
  get validatorCount(): BigInt {
    return this[0].toBigInt();
  }

  get networkFeeIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get active(): boolean {
    return this[3].toBoolean();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }
}

export class ExtractCommissionCall extends ethereum.Call {
  get inputs(): ExtractCommissionCall__Inputs {
    return new ExtractCommissionCall__Inputs(this);
  }

  get outputs(): ExtractCommissionCall__Outputs {
    return new ExtractCommissionCall__Outputs(this);
  }
}

export class ExtractCommissionCall__Inputs {
  _call: ExtractCommissionCall;

  constructor(call: ExtractCommissionCall) {
    this._call = call;
  }
}

export class ExtractCommissionCall__Outputs {
  _call: ExtractCommissionCall;

  constructor(call: ExtractCommissionCall) {
    this._call = call;
  }
}

export class ForceClaimCall extends ethereum.Call {
  get inputs(): ForceClaimCall__Inputs {
    return new ForceClaimCall__Inputs(this);
  }

  get outputs(): ForceClaimCall__Outputs {
    return new ForceClaimCall__Outputs(this);
  }
}

export class ForceClaimCall__Inputs {
  _call: ForceClaimCall;

  constructor(call: ForceClaimCall) {
    this._call = call;
  }

  get n(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ForceClaimCall__Outputs {
  _call: ForceClaimCall;

  constructor(call: ForceClaimCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LocalPoolWithdrawCall extends ethereum.Call {
  get inputs(): LocalPoolWithdrawCall__Inputs {
    return new LocalPoolWithdrawCall__Inputs(this);
  }

  get outputs(): LocalPoolWithdrawCall__Outputs {
    return new LocalPoolWithdrawCall__Outputs(this);
  }
}

export class LocalPoolWithdrawCall__Inputs {
  _call: LocalPoolWithdrawCall;

  constructor(call: LocalPoolWithdrawCall) {
    this._call = call;
  }

  get starAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LocalPoolWithdrawCall__Outputs {
  _call: LocalPoolWithdrawCall;

  constructor(call: LocalPoolWithdrawCall) {
    this._call = call;
  }
}

export class ReactivateCall extends ethereum.Call {
  get inputs(): ReactivateCall__Inputs {
    return new ReactivateCall__Inputs(this);
  }

  get outputs(): ReactivateCall__Outputs {
    return new ReactivateCall__Outputs(this);
  }
}

export class ReactivateCall__Inputs {
  _call: ReactivateCall;

  constructor(call: ReactivateCall) {
    this._call = call;
  }

  get operatorIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get cluster(): ReactivateCallClusterStruct {
    return changetype<ReactivateCallClusterStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class ReactivateCall__Outputs {
  _call: ReactivateCall;

  constructor(call: ReactivateCall) {
    this._call = call;
  }
}

export class ReactivateCallClusterStruct extends ethereum.Tuple {
  get validatorCount(): BigInt {
    return this[0].toBigInt();
  }

  get networkFeeIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get active(): boolean {
    return this[3].toBoolean();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }
}

export class RegisterValidatorCall extends ethereum.Call {
  get inputs(): RegisterValidatorCall__Inputs {
    return new RegisterValidatorCall__Inputs(this);
  }

  get outputs(): RegisterValidatorCall__Outputs {
    return new RegisterValidatorCall__Outputs(this);
  }
}

export class RegisterValidatorCall__Inputs {
  _call: RegisterValidatorCall;

  constructor(call: RegisterValidatorCall) {
    this._call = call;
  }

  get validatorParams(): RegisterValidatorCallValidatorParamsStruct {
    return changetype<RegisterValidatorCallValidatorParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get cluster(): RegisterValidatorCallClusterStruct {
    return changetype<RegisterValidatorCallClusterStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class RegisterValidatorCall__Outputs {
  _call: RegisterValidatorCall;

  constructor(call: RegisterValidatorCall) {
    this._call = call;
  }
}

export class RegisterValidatorCallValidatorParamsStruct extends ethereum.Tuple {
  get publicKey(): Bytes {
    return this[0].toBytes();
  }

  get withdrawalCredentials(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[3].toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get sharesData(): Bytes {
    return this[5].toBytes();
  }
}

export class RegisterValidatorCallClusterStruct extends ethereum.Tuple {
  get validatorCount(): BigInt {
    return this[0].toBigInt();
  }

  get networkFeeIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get active(): boolean {
    return this[3].toBoolean();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get depositContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ssvNetworkAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ssvTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get oracleNetworkAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get sstarETHAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get starETHAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get stakeStarRegistryAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get stakeStarTreasuryAddress(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get withdrawalCredentialsAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get feeRecipientAddress(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get mevRecipientAddress(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetCommissionParametersCall extends ethereum.Call {
  get inputs(): SetCommissionParametersCall__Inputs {
    return new SetCommissionParametersCall__Inputs(this);
  }

  get outputs(): SetCommissionParametersCall__Outputs {
    return new SetCommissionParametersCall__Outputs(this);
  }
}

export class SetCommissionParametersCall__Inputs {
  _call: SetCommissionParametersCall;

  constructor(call: SetCommissionParametersCall) {
    this._call = call;
  }

  get _rateDiffThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCommissionParametersCall__Outputs {
  _call: SetCommissionParametersCall;

  constructor(call: SetCommissionParametersCall) {
    this._call = call;
  }
}

export class SetLocalPoolParametersCall extends ethereum.Call {
  get inputs(): SetLocalPoolParametersCall__Inputs {
    return new SetLocalPoolParametersCall__Inputs(this);
  }

  get outputs(): SetLocalPoolParametersCall__Outputs {
    return new SetLocalPoolParametersCall__Outputs(this);
  }
}

export class SetLocalPoolParametersCall__Inputs {
  _call: SetLocalPoolParametersCall;

  constructor(call: SetLocalPoolParametersCall) {
    this._call = call;
  }

  get _localPoolMaxSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _localPoolWithdrawalLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _localPoolWithdrawalPeriodLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetLocalPoolParametersCall__Outputs {
  _call: SetLocalPoolParametersCall;

  constructor(call: SetLocalPoolParametersCall) {
    this._call = call;
  }
}

export class SetQueueParametersCall extends ethereum.Call {
  get inputs(): SetQueueParametersCall__Inputs {
    return new SetQueueParametersCall__Inputs(this);
  }

  get outputs(): SetQueueParametersCall__Outputs {
    return new SetQueueParametersCall__Outputs(this);
  }
}

export class SetQueueParametersCall__Inputs {
  _call: SetQueueParametersCall;

  constructor(call: SetQueueParametersCall) {
    this._call = call;
  }

  get _loopLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetQueueParametersCall__Outputs {
  _call: SetQueueParametersCall;

  constructor(call: SetQueueParametersCall) {
    this._call = call;
  }
}

export class SetRateParametersCall extends ethereum.Call {
  get inputs(): SetRateParametersCall__Inputs {
    return new SetRateParametersCall__Inputs(this);
  }

  get outputs(): SetRateParametersCall__Outputs {
    return new SetRateParametersCall__Outputs(this);
  }
}

export class SetRateParametersCall__Inputs {
  _call: SetRateParametersCall;

  constructor(call: SetRateParametersCall) {
    this._call = call;
  }

  get _maxRateDeviation(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _rateDeviationCheck(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRateParametersCall__Outputs {
  _call: SetRateParametersCall;

  constructor(call: SetRateParametersCall) {
    this._call = call;
  }
}

export class SetUnstakeParametersCall extends ethereum.Call {
  get inputs(): SetUnstakeParametersCall__Inputs {
    return new SetUnstakeParametersCall__Inputs(this);
  }

  get outputs(): SetUnstakeParametersCall__Outputs {
    return new SetUnstakeParametersCall__Outputs(this);
  }
}

export class SetUnstakeParametersCall__Inputs {
  _call: SetUnstakeParametersCall;

  constructor(call: SetUnstakeParametersCall) {
    this._call = call;
  }

  get _unstakePeriodLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUnstakeParametersCall__Outputs {
  _call: SetUnstakeParametersCall;

  constructor(call: SetUnstakeParametersCall) {
    this._call = call;
  }
}

export class SetValidatorWithdrawalThresholdCall extends ethereum.Call {
  get inputs(): SetValidatorWithdrawalThresholdCall__Inputs {
    return new SetValidatorWithdrawalThresholdCall__Inputs(this);
  }

  get outputs(): SetValidatorWithdrawalThresholdCall__Outputs {
    return new SetValidatorWithdrawalThresholdCall__Outputs(this);
  }
}

export class SetValidatorWithdrawalThresholdCall__Inputs {
  _call: SetValidatorWithdrawalThresholdCall;

  constructor(call: SetValidatorWithdrawalThresholdCall) {
    this._call = call;
  }

  get threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetValidatorWithdrawalThresholdCall__Outputs {
  _call: SetValidatorWithdrawalThresholdCall;

  constructor(call: SetValidatorWithdrawalThresholdCall) {
    this._call = call;
  }
}

export class SetWithdrawalParametersCall extends ethereum.Call {
  get inputs(): SetWithdrawalParametersCall__Inputs {
    return new SetWithdrawalParametersCall__Inputs(this);
  }

  get outputs(): SetWithdrawalParametersCall__Outputs {
    return new SetWithdrawalParametersCall__Outputs(this);
  }
}

export class SetWithdrawalParametersCall__Inputs {
  _call: SetWithdrawalParametersCall;

  constructor(call: SetWithdrawalParametersCall) {
    this._call = call;
  }

  get _withdrawalMinLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawalParametersCall__Outputs {
  _call: SetWithdrawalParametersCall;

  constructor(call: SetWithdrawalParametersCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get starAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get stakedStarAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnregisterValidatorCall extends ethereum.Call {
  get inputs(): UnregisterValidatorCall__Inputs {
    return new UnregisterValidatorCall__Inputs(this);
  }

  get outputs(): UnregisterValidatorCall__Outputs {
    return new UnregisterValidatorCall__Outputs(this);
  }
}

export class UnregisterValidatorCall__Inputs {
  _call: UnregisterValidatorCall;

  constructor(call: UnregisterValidatorCall) {
    this._call = call;
  }

  get publicKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get operatorIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get cluster(): UnregisterValidatorCallClusterStruct {
    return changetype<UnregisterValidatorCallClusterStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class UnregisterValidatorCall__Outputs {
  _call: UnregisterValidatorCall;

  constructor(call: UnregisterValidatorCall) {
    this._call = call;
  }
}

export class UnregisterValidatorCallClusterStruct extends ethereum.Tuple {
  get validatorCount(): BigInt {
    return this[0].toBigInt();
  }

  get networkFeeIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get active(): boolean {
    return this[3].toBoolean();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get stakedStarAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get starAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnstakeAndLocalPoolWithdrawCall extends ethereum.Call {
  get inputs(): UnstakeAndLocalPoolWithdrawCall__Inputs {
    return new UnstakeAndLocalPoolWithdrawCall__Inputs(this);
  }

  get outputs(): UnstakeAndLocalPoolWithdrawCall__Outputs {
    return new UnstakeAndLocalPoolWithdrawCall__Outputs(this);
  }
}

export class UnstakeAndLocalPoolWithdrawCall__Inputs {
  _call: UnstakeAndLocalPoolWithdrawCall;

  constructor(call: UnstakeAndLocalPoolWithdrawCall) {
    this._call = call;
  }

  get stakedStarAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeAndLocalPoolWithdrawCall__Outputs {
  _call: UnstakeAndLocalPoolWithdrawCall;

  constructor(call: UnstakeAndLocalPoolWithdrawCall) {
    this._call = call;
  }
}

export class UnstakeAndWithdrawCall extends ethereum.Call {
  get inputs(): UnstakeAndWithdrawCall__Inputs {
    return new UnstakeAndWithdrawCall__Inputs(this);
  }

  get outputs(): UnstakeAndWithdrawCall__Outputs {
    return new UnstakeAndWithdrawCall__Outputs(this);
  }
}

export class UnstakeAndWithdrawCall__Inputs {
  _call: UnstakeAndWithdrawCall;

  constructor(call: UnstakeAndWithdrawCall) {
    this._call = call;
  }

  get stakedStarAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeAndWithdrawCall__Outputs {
  _call: UnstakeAndWithdrawCall;

  constructor(call: UnstakeAndWithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get starAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
